{"mappings":"oeAmBA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAmB/B,SAASC,EAAcC,EAAUC,GACf,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,CAACM,SAAAT,EAAUU,MAAAT,IAEnBG,EAAO,CAACK,SAAAT,EAAUU,MAAAT,GAAQ,GAE3BU,OAAOV,GAAO,IAIlBW,MAAK,EAACH,SAAEA,EAAQC,MAAEA,MACjBjB,EAAAoB,OAAOC,QAAQ,qBAAqBL,QAAeC,OACnDK,QAAQC,IAAI,uBAAqBP,QAAiBC,MAAU,IAE7DO,OAAM,EAACR,SAAEA,EAAQC,MAAEA,MAClBjB,EAAAoB,OAAOK,QAAQ,oBAAoBT,QAAeC,OAClDK,QAAQC,IAAI,sBAAoBP,QAAeC,MAAU,G,CApC7Df,EAAKC,KAAKuB,iBAAiB,UAE3B,SAA6BC,GAC3BA,EAAMC,iBAEN,MAAMX,EAAQf,EAAKC,KAAK0B,SAASZ,MAAMa,MACjCC,EAAO7B,EAAKC,KAAK0B,SAASE,KAAKD,MAC/BE,EAAS9B,EAAKC,KAAK0B,SAASG,OAAOF,MAEzC,IAAIG,EAAOf,OAAOD,GAClB,IAAK,IAAID,EAAW,EAAGA,GAAYgB,EAAQhB,GAAY,EACrDV,EAAcU,EAAUiB,GACxBA,GAAQf,OAAOa,E","sources":["src/js/03-promises.js"],"sourcesContent":["// https://notiflix.github.io/\n// https://github.com/notiflix/Notiflix#readme\n// npm i notiflix\n\n// 1. Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, \n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// 2. Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay \n// зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, \n// що потрібно зробити з промісом - виконати або відхилити.\n\n// 3. Для відображення повідомлень користувачеві, замість console.log(), \n// використовуй бібліотеку notiflix.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css'\n\nconst refs = {\n  form: document.querySelector('form'),\n}\n\nrefs.form.addEventListener('submit', onClickButtonCreate)\n\nfunction onClickButtonCreate(event) {\n  event.preventDefault();\n\n  const delay = refs.form.elements.delay.value\n  const step = refs.form.elements.step.value\n  const amount = refs.form.elements.amount.value\n\n  let time = Number(delay)\n  for (let position = 1; position <= amount; position += 1) {   \n    createPromise(position, time)\n    time += Number(step);\n  } \n}\n\nfunction createPromise(position, delay) {\n  const promice = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay });\n      } else {\n        reject({position, delay });\n      }\n    }, Number(delay));   \n  });\n\n  promice\n  .then(({ position, delay }) => {\n    Notify.success(`Fulfilled promise ${position} in ${delay}ms`);         \n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`Rejected promise ${position} in ${delay}ms`);         \n    console.log(`❌ Rejected promise ${position} in ${delay}ms`); \n  });\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","Number","then","Notify","success","console","log","catch","failure","addEventListener","event","preventDefault","elements","value","step","amount","time"],"version":3,"file":"03-promises.06d09861.js.map"}