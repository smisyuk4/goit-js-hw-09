{"mappings":"gfAmBA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAwB/B,SAASC,EAAcC,EAAUC,GACTC,KAAKC,SAAW,IAGpCV,EAAAW,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,OAC3DM,QAAMC,IAAI,uBAAwCF,OAAfN,EAAS,QAAYM,OAANL,EAAM,SAG1DR,EAAAW,OAAOK,QAAQ,sBAAuCH,OAAfN,EAAS,QAAYM,OAANL,EAAM,OAC1DM,QAAMC,IAAI,sBAAuCF,OAAfN,EAAS,QAAYM,OAANL,EAAM,O,CA9B7DN,EAAKC,KAAKc,iBAAiB,UAE3B,SAA6BC,GAC3BA,EAAMC,iBAON,IALA,IAIIC,EAJEZ,EAAQN,EAAKC,KAAKkB,SAASb,MAAMc,MACjCC,EAAOrB,EAAKC,KAAKkB,SAASE,KAAKD,MAC/BE,EAAStB,EAAKC,KAAKkB,SAASG,OAAOF,MAGhCf,EAAW,EAAGA,GAAYiB,EAAQjB,GAAY,EACpC,IAAbA,GACFa,EAAOK,OAAOjB,GACdF,EAAcC,EAAUa,KAExBA,GAAQK,OAAOF,GACfjB,EAAcC,EAAUa,G","sources":["src/js/03-promises.js"],"sourcesContent":["// https://notiflix.github.io/\n// https://github.com/notiflix/Notiflix#readme\n// npm i notiflix\n\n// 1. Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, \n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// 2. Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay \n// зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, \n// що потрібно зробити з промісом - виконати або відхилити.\n\n// 3. Для відображення повідомлень користувачеві, замість console.log(), \n// використовуй бібліотеку notiflix.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css'\n\nconst refs = {\n  form: document.querySelector('form'),\n}\n\nrefs.form.addEventListener('submit', onClickButtonCreate)\n\nfunction onClickButtonCreate(event) {\n  event.preventDefault();\n\n  const delay = refs.form.elements.delay.value\n  const step = refs.form.elements.step.value\n  const amount = refs.form.elements.amount.value\n\n  let time\n  for (let position = 1; position <= amount; position += 1) {\n    if (position === 1) {\n      time = Number(delay)\n      createPromise(position, time)\n    } else {\n      time += Number(step);\n      createPromise(position, time)\n    }\n  } \n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill - Виконано \n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);         \n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    // Reject Відхилено \n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);         \n    console.log(`❌ Rejected promise ${position} in ${delay}ms`); \n  }\n}\n\n // const promice = new Promise((resolve, reject) => {\n  //   const shouldResolve = Math.random() > 0.3;\n  //   setTimeout(() => {\n  //     if (shouldResolve) {\n  //     resolve({position: 1000, delay });\n  //     } else {\n  //       reject({position: 1000, delay });\n  //     }\n  //   }, delay);\n  // });\n\n  // console.log(promice)\n\n  // createPromise(position, delay)\n  // promice\n  // .then(({ position, delay }) => {\n  //   Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);         \n  //   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  // })\n  // .catch(({ position, delay }) => {\n  //   Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);         \n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`); \n  // });\n\n\n // const isSuccess = true;\n\n  // const promise = new Promise((resolve, reject) => {\n  //   setTimeout(() => {\n  //     if (isSuccess) {\n  //       resolve(\"Success! Value passed to resolve function\");\n  //     } else {\n  //       reject(\"Error! Error passed to reject function\");\n  //     }\n  //   }, 2000);\n  // });\n\n  // promise.then(\n  // value => {\n  //   console.log(value);\n  // })"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","Notify","success","concat","console","log","failure","addEventListener","event","preventDefault","time","elements","value","step","amount","Number"],"version":3,"file":"03-promises.0970a263.js.map"}